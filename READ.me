// Heap-sort
// With instructions:-------------
// C++ program for implementation of Heap Sort 
#include <iostream> 
using namespace std; 
  
// To heapify a subtree rooted with node i which is 
// an index in ARR[]. N is size of heap 
void CONVERTHEAP(int ARRAY[], int N, int I) 
{ 
    int LARGEST = I; // Initialize largest as root 
    int L = 2 * I + 1; // left = 2*i + 1 
    int R = 2 * I + 2; // right = 2*i + 2 
  
    // If left child is larger than root 
    if (L < N && ARRAY[L] > ARRAY[LARGEST]) 
    {
        LARGEST = L; 
    }
  
    // If right child is larger than largest so far 
    if (R < N && ARRAY[R] > ARRAY[LARGEST]) 
    {
        LARGEST = R; 
    }
    // If largest is not root 
    if (LARGEST != I) 
    { 
        swap(ARRAY[I], ARRAY[LARGEST]); 
  
        // Recursively heapify the affected sub-tree 
        HEAPIFY(ARR, N, LARGEST); 
    } 
} 
  
// main function to do heap sort 
void HEAPSORT(int ARRAY[], int N) 
{ 
    // Build heap (rearrange array) 
    for (int I = N / 2 - 1; I >= 0; I--) 
    {
        HEAPIFY(ARRAY, N, I); 
    }
    // One by one extract an element from heap 
    for (int I = N - 1; I >= 0; I--) 
    { 
        // Move current root to end 
        swap(ARRAY[0], ARRAY[I]); 
  
        // call max heapify on the reduced heap 
        HEAPIFY(ARRAY, I, 0); 
    } 
} 
  
/* A utility function to print array of size n */
void printARRAY(int ARRAY[], int N) 
{ 
    for (int I = 0; I < N; ++I) 
    {
        cout << ARRAY[I] << " "; 
    }    
    cout << "\N"; 
} 
  
int main() 
{ 
    int ARRAY[] = { 12, 11, 13, 5, 6, 7 }; 
    int N = sizeof(ARRAY) / sizeof(ARRAY[0]); 
  heapsort
    heapSort(ARRAY, N); 
  
    cout << "Sorted Heap is: \N"; 
    printARRAY(ARRAY, N); 
}
